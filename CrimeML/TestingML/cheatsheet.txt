# Data Preprocessing
import pandas as pd

# Assuming your data is stored in a DataFrame called 'crime_data'
# Clean the data
crime_data.dropna(inplace=True)

# Extract features
crime_data['Month'] = pd.to_datetime(crime_data['Period'], format='%b').dt.month
crime_data['Year'] = crime_data['Ã…r'].astype(int)

# Encode categorical variables if needed
# You can use techniques like one-hot encoding or label encoding

# Feature Engineering (Optional)
# Create lag features if needed

# Split Data
train_data = crime_data[(crime_data['Year'] >= 2021) & (crime_data['Year'] <= 2023)]
test_data = crime_data[crime_data['Year'] == 2024]

# Model Selection and Training
from statsmodels.tsa.arima.model import ARIMA

# Assuming 'Region' and 'Brott' are encoded and 'Antal' is the target variable
# You might need to loop through regions and crime types if you want to build separate models for each
region = 'Botkyrka kommun'
crime_type = '3-7 kap. Brott mot person'

train_subset = train_data[(train_data['Region'] == region) & (train_data['Brott'] == crime_type)]['Antal']

model = ARIMA(train_subset, order=(5,1,0))
fitted_model = model.fit()

# Model Evaluation
# Evaluate the model's performance on the test set using appropriate metrics

# Prediction for 2024
forecast = fitted_model.forecast(steps=len(test_data))

# You'll have to adjust this according to your data structure and model choice
print(forecast)



LAG 


# Assuming your data is stored in a DataFrame called 'crime_data'
# Assuming 'Region' and 'Brott' are already encoded and 'Antal' is the target variable

# Sort the data by region, crime type, and date
crime_data.sort_values(by=['Region', 'Brott', 'Year', 'Month'], inplace=True)

# Define the maximum lag period (e.g., 12 months)
max_lag_period = 12

# Create lag features for the target variable 'Antal'
for lag in range(1, max_lag_period + 1):
    crime_data[f'Antal_lag_{lag}'] = crime_data.groupby(['Region', 'Brott'])['Antal'].shift(lag)

# Drop rows with NaN values resulting from shifting
crime_data.dropna(inplace=True)

# Now crime_data contains lag features representing historical crime data


matplotlib
import matplotlib.pyplot as plt

# Assuming 'crime_data' is your entire dataset
crime_data_to_visualize = crime_data

# Extracting column names and values
columns = crime_data_to_visualize.columns
data = crime_data_to_visualize.values

# Creating a Matplotlib figure and axis
fig, ax = plt.subplots()

# Creating the table
table = ax.table(cellText=data, colLabels=columns, loc='center')

# Setting table properties
table.auto_set_font_size(False)
table.set_fontsize(12)
table.scale(1.2, 1.2)  # Adjust the table scale as needed

# Removing axis
ax.axis('off')

# Displaying the table
plt.show()


seaborn

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'crime_data' is your entire dataset
# Assuming 'crime_data' is a pandas DataFrame

# Step 1: Extract unique region names
unique_regions = data['Region'].unique()

# Step 2: Create a dictionary mapping numeric codes to region names
region_names_to_codes = {region: i for i, region in enumerate(unique_regions)}

# Display unique regions
print("Unique regions:", unique_regions)

# Display dictionary mapping region names to codes
print("Region names to codes:", region_names_to_codes)

data['Region'] = data['Region'].map(region_codes_to_names)

# Selecting numerical columns only
numerical_columns = data.select_dtypes(include='number')

# Plotting a pairplot with a hue based on the 'Region' column
sns.pairplot(data, hue='Region', vars=numerical_columns.columns)
plt.show()
